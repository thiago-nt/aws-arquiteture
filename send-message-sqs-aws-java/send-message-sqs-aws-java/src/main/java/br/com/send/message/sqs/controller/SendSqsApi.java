/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package br.com.send.message.sqs.controller;

import java.io.IOException;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.databind.ObjectMapper;

import br.com.send.message.sqs.model.Create;
import br.com.send.message.sqs.model.CreateResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-02-05T18:19:44.810-03:00")

@Api(value = "SendSqsApi", description = "the Sqs Send message API")
public interface SendSqsApi {

    Logger log = LoggerFactory.getLogger(SendSqsApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Envia msg para fila sqs", nickname = "create", notes = "", response = CreateResponse.class, authorizations = {
        @Authorization(value = "clientIdHeader")
    }, tags={ "create", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operação executada com sucesso", response = CreateResponse.class),
        @ApiResponse(code = 400, message = "Informações inválidas", response = CreateResponse.class),
        @ApiResponse(code = 404, message = "Informações não encontradas", response = CreateResponse.class),
        @ApiResponse(code = 500, message = "Ocorreu um erro interno", response = CreateResponse.class) })
    @RequestMapping(value = "/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default CompletableFuture<ResponseEntity<CreateResponse>> _create(@ApiParam(value = "Objeto complexo da autorização" ,required=true )  @Valid @RequestBody Create create) {
        return create(create);
    }

    default CompletableFuture<ResponseEntity<CreateResponse>> create(Create solicitacao) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return CompletableFuture.completedFuture(new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", CreateResponse.class), HttpStatus.NOT_IMPLEMENTED));
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default interface so no example is generated");
        }
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
    }
}
